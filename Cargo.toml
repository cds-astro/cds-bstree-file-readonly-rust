[package]
name = "bstree_file"
version = "0.1.1"
authors = ["pineau <francois-xavier.pineau@astro.unistra.fr>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
num-traits = "0.2"       # Generic float for f32 and f64
structopt = "0.3"        # CLI lib (based on clap)
byteorder = "1.3.2"      # Byteorder
csv = "1.1"              # CVS parsing lib
itertools = "0.8.2"      # For advanced methods on iterators
bincode = "1.2.1"        # Binary serialization/deserialisation
serde = { version = "1.0.104", features = ["derive"] }
serde_json = "1.0.48"    # Support JSON output
rand = "0.7"             # Random numbers generator used in the 'genfile' binary

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
memmap = "0.7.0"         # Support for memory-mapped files

[features]
default = ["qat2s"]
# On feature per possible (ID, VAL) couple.
# - VAL is the type of the indexed value (the -- non-uniqe -- key of the binary-search tree).
# - ID  is the type of identifier allowing to retrieve the record the value is associated with
#   it may contains a String of counts, i.e. something which is not necessarily a record identifier.
u24_u24 = []
u24_u32 = []
u24_u40 = []
u24_u48 = []
u24_u56 = []
u24_u64 = []
u24_i24 = []
u24_i32 = []
u24_i40 = []
u24_i48 = []
u24_i56 = []
u24_i64 = []
u24_f32 = []
u24_f64 = []
u24_str = []
u32_u24 = []
u32_u32 = []
u32_u40 = []
u32_u48 = []
u32_u56 = []
u32_u64 = []
u32_i24 = []
u32_i32 = []
u32_i40 = []
u32_i48 = []
u32_i56 = []
u32_i64 = []
u32_f32 = []
u32_f64 = []
u32_str = []
u40_u24 = []
u40_u32 = []
u40_u40 = []
u40_u48 = []
u40_u56 = []
u40_u64 = []
u40_i24 = []
u40_i32 = []
u40_i40 = []
u40_i48 = []
u40_i56 = []
u40_i64 = []
u40_f32 = []
u40_f64 = []
u40_str = []
u48_u24 = []
u48_u32 = []
u48_u40 = []
u48_u48 = []
u48_u56 = []
u48_u64 = []
u48_i24 = []
u48_i32 = []
u48_i40 = []
u48_i48 = []
u48_i56 = []
u48_i64 = []
u48_f32 = []
u48_f64 = []
u48_str = []
u56_u24 = []
u56_u32 = []
u56_u40 = []
u56_u48 = []
u56_u56 = []
u56_u64 = []
u56_i24 = []
u56_i32 = []
u56_i40 = []
u56_i48 = []
u56_i56 = []
u56_i64 = []
u56_f32 = []
u56_f64 = []
u56_str = []
u64_u24 = []
u64_u32 = []
u64_u40 = []
u64_u48 = []
u64_u56 = []
u64_u64 = []
u64_i24 = []
u64_i32 = []
u64_i40 = []
u64_i48 = []
u64_i56 = []
u64_i64 = []
u64_f32 = []
u64_f64 = []
u64_str = []
str_u24 = []
str_u32 = []
str_u40 = []
str_u48 = []
str_u56 = []
str_u64 = []
str_i24 = []
str_i32 = []
str_i40 = []
str_i48 = []
str_i56 = []
str_i64 = []
str_f32 = []
str_f64 = []
str_str = []
qat2s = ["u64_u32", "u64_u64", "u32_u64", "u32_u32"]
# Obtained copying features in toto.txt and doing:
# cat toto.txt | cut -d ' ' -f 1 | sed -r 's/(.*)/"\1",/' | tr -d '\n'
all = ["u24_u24","u24_u32","u24_u40","u24_u48","u24_u56","u24_u64","u24_i24","u24_i32","u24_i40","u24_i48","u24_i56","u24_i64","u24_f32","u24_f64","u24_str","u32_u24","u32_u32","u32_u40","u32_u48","u32_u56","u32_u64","u32_i24","u32_i32","u32_i40","u32_i48","u32_i56","u32_i64","u32_f32","u32_f64","u32_str","u40_u24","u40_u32","u40_u40","u40_u48","u40_u56","u40_u64","u40_i24","u40_i32","u40_i40","u40_i48","u40_i56","u40_i64","u40_f32","u40_f64","u40_str","u48_u24","u48_u32","u48_u40","u48_u48","u48_u56","u48_u64","u48_i24","u48_i32","u48_i40","u48_i48","u48_i56","u48_i64","u48_f32","u48_f64","u48_str","u56_u24","u56_u32","u56_u40","u56_u48","u56_u56","u56_u64","u56_i24","u56_i32","u56_i40","u56_i48","u56_i56","u56_i64","u56_f32","u56_f64","u56_str","u64_u24","u64_u32","u64_u40","u64_u48","u64_u56","u64_u64","u64_i24","u64_i32","u64_i40","u64_i48","u64_i56","u64_i64","u64_f32","u64_f64","u64_str","str_u24","str_u32","str_u40","str_u48","str_u56","str_u64","str_i24","str_i32","str_i40","str_i48","str_i56","str_i64","str_f32","str_f64","str_str"]

# For exemple, we could store (hpx_order12, mag) to build a full-sky density map according to a mag constraint.
